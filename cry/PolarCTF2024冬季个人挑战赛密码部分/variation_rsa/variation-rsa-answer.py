import gmpy2
from Crypto.Util.number import *
c1 = 15586247697277532046812950432902773732327329184929961854997495210573627117260228709936327195953289907799735776425925363312137294734464930656006335287372431016600211951629567046779533236160645460268386728835983326093046904859159743244507215622807770074479759250929154791311227414122209325560728780689824290378441264308163115237261828259796271013473102073280513506976297605519870543598183104646977435546991722183887485579279535990826339444296156216087404614022283778959805361955256593072994347166395388701693394136294643451644783704090395347138731250701463174399456633197640174044073848759722308083678547686777162484795
c2 = 17538934691576368783671402501171847280494794600029573039793422483216151678595631267048878509399287917096434364875515741919976948438750360077454119679833636779683059708923187173534056993351622231730338590900612436146711101466447607660747846309349555660230127698911782175033934569458421302573395765698060907602063256600517663557182214450409111576326817516851471592870072454559230917774145790891005667612040640372734277924267234931622903586083603003276003081251200734229179424055785828132466558983095351212117320446426640092631710276126438840261800085306640721068097066410181192932853444970770042765344237745920213249599
c3 = 16500292460777375934245920298090466447118028191799066692857815637083078289925184090552039119465751284568237901897458018074018407946955502121238967064151893052235846218026798473133501871632705816383843633672282725382714026554688976046798940263992443021302540771543277815175625781564566057557112370221505148930784203175724847617881577039888356144680645030276155402270796992419421218599142459006125030744519466683717481511271970404369880716637102820401418219595824439631746538283450446161346732193660604974975033057222454482416413370442920846656168361120774965471969258033191477596029419991953860038094093086641087013952
e1 = 59537
e2 = 86311
e3 = 65537
def RSA_decrypt(p,q,e,c):
    n=p*q
    phi=(p-1)*(q-1)
    d=gmpy2.invert(e,phi)
    return pow(c,d,n)
# a=n1//b
a=101998217842745264996354859461879467482781993489311327698934268222761670454855054146959124492799003744274614575525976381553457537986222311419396627574432758705379762782819459256899844903939661705610081826965466476681847388631201578731800923356287096976461528652723531710515573319386701174840286210122154204229
# b=gcd(n1,n2)
b=145338497417876433012530556253000142575544656315526847678374798877176689201331419359729555686347675951563817042051322515704444329416825709011712844299629882459209042596836947977142905623258574076233166324782775329333306591041792047445548150093977422677580378769962124826348651749785989096625130231515527386729
# c=n2//b
c=145136312160408205020553453429068654160143643345967195304417196713467200746241339164508323025726341862892449303775453973896617070255578519012867765050047273865123269035218816549553992123208922174846558779309249112747329135116021208625136871031735796109781754006624903133675931535366493822190888977091501609857
c1=RSA_decrypt(b,c,e1,c1)
mm1=RSA_decrypt(a,b,e1,c1)
# r=n3//s
r=121650418778094365148714083400090150517991683569986449115267160022002810089929945618000766455193660417665915270745741730665330966823460485287523535718065305459900295074852919421243130421015646372522323789464610102805203672733721415870415444912568381399868480109435408571745578152348486092345950742819297133887
# s=gcd(n3,n4)
s=154966843640330291991442854492883080534781224156536257813456198836139242328470283519774280928706335476136625799550427781247183513088815499100782656046771292510211802561661999374818783291080922865700863476582056286241448299456794096095821684920153718102335711050774706746625717162976555840706915914687270644179
# t=n4//s
t=155784189828056091589146003896906734468663380207736973230173930022130789617834934487061293919399720837504304577097406914364487306470736425725104047186962265636737785394026598628249418717263985411469480093590884741570091395978320923745407409837238213645582375527715666053883209915909558366593160463373443936393
c2=RSA_decrypt(s,t,e2,c2)
mm2=RSA_decrypt(r,s,e2,c2)
# x=n5//y
x=176192150070785742648591326544853644270565132745101784658342368397392031054551277309924701839030506355438053895117770371223808723314643321693957544149041565142527945492572375747182825837844724562390443500963794644002995684167529545050683428367923465718545368694304820038637054040182957665298159742609181144863
# y=gcd(n5,n6)
y=155049911997856123796718660682454516265903781735218070944596394719609317178399687648425370014808192960785562651442162769532517626021538917323398787017538252469689061304453532726562740718384818151026379842639410143247523023611039828643863421258706140020031846111154726637074881875862437054371320300096766721429
# z=n6//z
z=150139064111630147271401872921617239873875268197883334237784916904120092397619919883230101993597222175754252162230231790210376582065016425693114338806815052427483520609188090539091965696527562892020793181529179101187650066339156086921166948199731793905056188524107054038430924082598940812636306946124079255469
c3=RSA_decrypt(y,z,e3,c3)
mm3=RSA_decrypt(x,y,e3,c3)
flag1=long_to_bytes(mm1)
flag2=long_to_bytes(mm2)
flag3=long_to_bytes(mm3)
flag1_str=flag1.decode("utf-8")
flag2_str=flag2.decode("utf-8")
print(flag1_str)
print(flag2_str)
print(flag3)