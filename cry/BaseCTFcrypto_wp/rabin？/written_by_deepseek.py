# -*- coding: utf-8 -*-
from Crypto.Util.number import *
import gmpy2

# Given values
p = 8531212975719216550108614256955774722172741885676113601617182716356239301381951899737237219659253655889636684200345109462928796329670321336864298557778843
q = 7443256287912111739335729314443559886458007838130371799255078565502662459436043455787869631999073617967343884377537828940738213460508765519478956421282871
n = 63500004625039456439237191267891267558404574431112995926594213383621331385226487443753506088788203040258384788149958095020759745138424276657604371402824844725005596890673468964961037168078105356669148960568974603581485045691990626520286184874115519591663033533771400334558853058140717812903874350138362098253
c = 51452608438757130697131508192775727191605112918772187364577097224326062184288501602000700342623122861398852536963355962672293705131887315354242193416090384360837672258861475017098419459125395949090523474744886423754439919504732741712693909507972791203801494594878447921609420574365853676576693694677914169353
e = 4

# Step 1: Compute the square roots of c modulo p and q
mp = gmpy2.powmod(c, (p + 1) // 4, p)
mq = gmpy2.powmod(c, (q + 1) // 4, q)

# Step 2: Use the Chinese Remainder Theorem to find the square roots modulo n
yp = gmpy2.powmod(mp, (q + 1) // 4, n)
yq = gmpy2.powmod(mq, (p + 1) // 4, n)

# Step 3: Combine the results using CRT
def crt(a, b, m, n):
    u = gmpy2.invert(m, n)
    v = gmpy2.invert(n, m)
    return (a * v * n + b * u * m) % (m * n)

x1 = crt(mp, mq, p, q)
x2 = crt(mp, -mq % q, p, q)
x3 = crt(-mp % p, mq, p, q)
x4 = crt(-mp % p, -mq % q, p, q)

# Step 4: Compute the fourth roots by taking square roots again
m1 = gmpy2.powmod(x1, (p + 1) // 4, p)
m2 = gmpy2.powmod(x2, (p + 1) // 4, p)
m3 = gmpy2.powmod(x3, (p + 1) // 4, p)
m4 = gmpy2.powmod(x4, (p + 1) // 4, p)

# Step 5: Convert the possible messages back to bytes
possible_messages = [long_to_bytes(m) for m in [m1, m2, m3, m4]]

# Step 6: Find the correct message
for msg in possible_messages:
    if b"BaseCTF" in msg:
        print("Flag:", msg.decode())
        break
